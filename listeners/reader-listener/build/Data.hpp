/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Data.idl
  Source: Data.hpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#ifndef DDSCXX_DATA_HPP
#define DDSCXX_DATA_HPP

#include <cstdint>
#include <string>

namespace HelloWorldData
{
class Msg
{
private:
 int32_t userID_ = 0;
 std::string message_;
 uint32_t counter_ = 0;

public:
  Msg() = default;

  explicit Msg(
    int32_t userID,
    const std::string& message,
    uint32_t counter) :
    userID_(userID),
    message_(message),
    counter_(counter) { }

  int32_t userID() const { return this->userID_; }
  int32_t& userID() { return this->userID_; }
  void userID(int32_t _val_) { this->userID_ = _val_; }
  const std::string& message() const { return this->message_; }
  std::string& message() { return this->message_; }
  void message(const std::string& _val_) { this->message_ = _val_; }
  void message(std::string&& _val_) { this->message_ = _val_; }
  uint32_t counter() const { return this->counter_; }
  uint32_t& counter() { return this->counter_; }
  void counter(uint32_t _val_) { this->counter_ = _val_; }

  bool operator==(const Msg& _other) const
  {
    (void) _other;
    return userID_ == _other.userID_ &&
      message_ == _other.message_ &&
      counter_ == _other.counter_;
  }

  bool operator!=(const Msg& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::HelloWorldData::Msg>::getTypeName()
{
  return "HelloWorldData::Msg";
}

template <> constexpr bool TopicTraits<::HelloWorldData::Msg>::isSelfContained()
{
  return false;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::HelloWorldData::Msg>::type_map_blob_sz() { return 290; }
template<> constexpr unsigned int TopicTraits<::HelloWorldData::Msg>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::HelloWorldData::Msg>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xfa,  0x12,  0x75,  0xe5,  0x6c,  0xf7,  0x76, 
 0xc5,  0xdf,  0x82,  0x93,  0x20,  0xbd,  0x7d,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x58,  0x5c,  0x95,  0x70,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x78,  0xe7,  0x31,  0x02, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x88,  0x6b,  0xb7,  0x3b,  0x00, 
 0x96,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x5b,  0xd1,  0x30,  0x76,  0xa2,  0x69,  0xa3, 
 0x39,  0x29,  0xc8,  0x9c,  0xd1,  0xa4,  0x30,  0x00,  0x7e,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x48,  0x65,  0x6c,  0x6c, 
 0x6f,  0x57,  0x6f,  0x72,  0x6c,  0x64,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x4d,  0x73,  0x67,  0x00, 
 0x56,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0x04,  0x00,  0x07,  0x00,  0x00,  0x00,  0x75,  0x73,  0x65,  0x72,  0x49,  0x44,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x6d,  0x65,  0x73,  0x73,  0x61,  0x67,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x63,  0x6f,  0x75,  0x6e,  0x74,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x5b,  0xd1,  0x30,  0x76,  0xa2,  0x69,  0xa3,  0x39,  0x29,  0xc8,  0x9c, 
 0xd1,  0xa4,  0x30,  0xf1,  0xfa,  0x12,  0x75,  0xe5,  0x6c,  0xf7,  0x76,  0xc5,  0xdf,  0x82,  0x93,  0x20, 
 0xbd,  0x7d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::HelloWorldData::Msg>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xfa,  0x12,  0x75,  0xe5,  0x6c,  0xf7,  0x76,  0xc5,  0xdf,  0x82,  0x93, 
 0x20,  0xbd,  0x7d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x5b,  0xd1,  0x30,  0x76,  0xa2,  0x69,  0xa3,  0x39,  0x29,  0xc8,  0x9c, 
 0xd1,  0xa4,  0x30,  0x00,  0x82,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::HelloWorldData::Msg>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::HelloWorldData::Msg>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::HelloWorldData::Msg)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::HelloWorldData::Msg>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.counter()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto &props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::HelloWorldData::Msg& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.counter()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::HelloWorldData::Msg& instance, bool as_key) {
  auto &props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.counter()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto &props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.counter()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto &props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_DATA_HPP
